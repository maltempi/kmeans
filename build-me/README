Implementação da paralelização do algoritmo K-means em CUDA, Sequencial e uma implementação de um hotspot em OPENMP.

Esta implementação foi feita para o projeto final da disciplina MO644 da pós graduação do instituto de computação da Universidade Estadual de Campinas (Unicamp).

Autores:
	Alex S. Torres - alexst07@gmail.com - RA. 161939
	Thiago J. M. Maltempi - tmmaltempi@gmail.com - R.A. 180070

Este código está disponível em github.com.br/maltempi/kmeans. E futuramente servirá como contribuição de duas implementações (cuda e openmp) para um repositório que possui implementações do K-means em várias linguagens de programação. (github.com/andreaferretti/kmeans).

-----

Observação importante: As especificações deste trabalho demandaram algumas mudanças na forma de output do programa, então foi criado uma branch temporária para colocar as modificações das especificações deste trabalho. A branch é mo644_specifications

-----

Observação importante2: Os resultados das execuções deste algoritmo são dados em milisegundos, referentes a 100 execuções de 15 iterações do kmeans. Tendo estas 100 execuções, é possível fazer a média do tempo gasto em 15 iterações. Logo, pegar o tempo dado na exeução do programa e dividir por 100.

-----

Observação importante3: Por uma limitação de 5MB no SUSY, foi colocado apenas o arquivo de input de 100.000 points. Os arquivos com 10.000 e de 1.000.000 podem ser baixados no repositório do github (github.com/maltempi/kmeans/${branch mo644_specificacions}/build-me/input). Ou ser gerado através do arquivo input/generate_files.py, basta colocar o número de pontos que você quer que gere no código, e executar:

python generate_files.py > novo_arquivo.json

-----

Observacao importante 4. A implementação de OpenMP possui o paralelismo da função que é o maior hotspot da aplicação: group_by_cluster. O objetivo de fazer a implementação em OpenMP foi mostrar a eficiência da programação paralela em GPU com a eficiência da programação paralela em CPU. Porém, o foco deste trabalho é a paralelização do algoritmo de K-means com a plataforma CUDA.

-----

Requisitos mínimos para compilação e execução:

 -> Cuda 7.0
 -> GCC 4.8.8

-----
Estrutura do diretório:

/ra61939-180070 --------------> root
--cuda/ ----------------------> cuda implementation
----src/ ---------------------> cuda source
------{source-files} ---------> source files...
----makefile -----------------> makefile
----build/ -------------------> created on make execution - compilation outputs
----kmeans.out ---------------> executable implementation - created on make execution
--openmp/ --------------------> openmp implementation
----src/ ---------------------> openmp implementation
------{source-files} ---------> source files...
----makefile -----------------> makefile
----build/ -------------------> created on make execution
----kmeans.out ---------------> executable implmentation - created on make execution;
--input/----------------------> input files
----points.json --------------> input with 100.000 points
--output.dat -----------------> resultado do algoritmo
--ra161939-ra180070-apresentacao.pdf -> apresentacao em pdf
--ra161939-ra180070-relatorio.pdf -> relatório em pdf

Arquivos de saída

Na raiz do diretório existe um arquivo chamado output.dat, que é o arquivo de saida.
A cada execução é adicionado a este arquivo a seguinte estrutura:

-> Cabeçalho (tecnologias utilizadas e informações sobre a execução)
-> Centróids iniciais

-> Resultado (print do array de grupos)

-> tempo de execução (em ms) referentes à 100 execuções de 15 iterações do kmeans


-----

Compilação:

CUDA
	$/ra61939-ra180070/cuda/ make

OpenMP
	$/ra61939-ra180070/openmp/ make

-----

Execução:

CUDA
	$/ra61939-ra180070/cuda/kmeans.out [ path-arquivo-entrada ] [ qtde_points ] [ qtde_centroids ]

	ou

	$/ra61939-ra180070/cuda/ make run # executa 100.000 points com 10 centróids

OpenMP
	$/ra61939-ra180070/openmp/kmeans.out [ path-arquivo-entrada ] [ qtde_points ] [ qtde_centroids ] [ num_threads]

	ou

	$/ra61939-ra180070/openmp/ make run # executa 100.000 points com 10 centróids
-----
